<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Peng ganyu blog</title>
    <link>https://xibolun.github.io/tags/golang/</link>
    <description>Recent content in golang on Peng ganyu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 29 Dec 2021 10:11:23 +0800</lastBuildDate><atom:link href="https://xibolun.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go os.exec</title>
      <link>https://xibolun.github.io/post/golang/go--os.exec/</link>
      <pubDate>Wed, 29 Dec 2021 10:11:23 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--os.exec/</guid>
      <description>Go os.exec golang基础的执行命令操作如下 基础命令执行 func TestSingleCommand(t *testing.T) { stdout, err := exec.Command(&amp;#34;uname&amp;#34;, &amp;#34;-a&amp;#34;).CombinedOutput() if err != nil { t.Error(err) return } t.Log(stdout) } 基础超时操作 func TestSingleTimeoutCommand(t *testing.T) { ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second) defer cancel() stdout, err := exec.CommandContext(ctx, &amp;#34;ping&amp;#34;, &amp;#34;-c 2&amp;#34;, &amp;#34;-i 1&amp;#34;,</description>
    </item>
    
    <item>
      <title>M1 Goland无法debug</title>
      <link>https://xibolun.github.io/post/golang/%E5%85%B3%E4%BA%8Egoland%E6%97%A0%E6%B3%95debug%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 18 Jan 2021 14:50:13 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/%E5%85%B3%E4%BA%8Egoland%E6%97%A0%E6%B3%95debug%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>起因 新版本的m1是ARM架构，在安装完2020.03版本的Goland后，非debug启动正常，但debug启动的时候报错如下： rosetta error: failed to allocate vm</description>
    </item>
    
    <item>
      <title>go的一些博客学习资源列表</title>
      <link>https://xibolun.github.io/post/golang/go--blogs/</link>
      <pubDate>Wed, 15 Jan 2020 22:54:35 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--blogs/</guid>
      <description>关于GO的一些blog 以下为自己在阅读过程当中积累的一些关于go的文章 关于go性能提升的一些建议 如何在生产环境进行debug 语言特性 10个常</description>
    </item>
    
    <item>
      <title>Go源码分析(六)GC</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%85%ADgc/</link>
      <pubDate>Tue, 01 Oct 2019 22:52:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%85%ADgc/</guid>
      <description>GC的方式 理解垃圾回收算法 一文里面有gif的形式，直观地描述了常用的gc算法 引用计数 不足的地方，每次都要对对象进行计数，开销比较大 会导致循环</description>
    </item>
    
    <item>
      <title>Go源码分析(五)内存分配</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%94%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Fri, 20 Sep 2019 22:52:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%94%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>内存模型 分配逻辑 入口在 // src/runtime/malloc.go // implementation of new builtin // compiler (both frontend and SSA backend) knows the signature // of this function func newobject(typ *_type) unsafe.Pointer { return mallocgc(typ.size, typ, true) } mgallocgc里面主要看三个判断 c := gomcache() var x unsafe.Pointer noscan := typ ==</description>
    </item>
    
    <item>
      <title>Go源码分析(四)调度器</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%9B%9B%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Tue, 10 Sep 2019 22:52:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%9B%9B%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>调度器 在高并发场景当中，一般会起很多的协程(goroutine)，这样一来，就会导致阻塞操作；为了解决这些问题，go语言自己实现了一套 调度器</description>
    </item>
    
    <item>
      <title>Go源码分析(三)从main.go开始</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89%E4%BB%8Emain.go%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sun, 08 Sep 2019 22:52:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89%E4%BB%8Emain.go%E5%BC%80%E5%A7%8B/</guid>
      <description>准备开始从main.go开始分析源码</description>
    </item>
    
    <item>
      <title>Go源码分析(二)Debug工具</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8Cdebug%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 06 Sep 2019 07:59:20 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8Cdebug%E5%B7%A5%E5%85%B7/</guid>
      <description>Go源码分析(二)Debug工具 gdb 什么是GDB，GDB官网给出了详细的介绍，下载，以及bug，git地址等 为什么要用它？当你想debug，不</description>
    </item>
    
    <item>
      <title>Go源码分析(一)环境搭建</title>
      <link>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 02 Sep 2019 20:19:12 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Go源码分析(一) 环境搭建 安装依赖 gcc : 可以使用gcc -v查看 bzip2 [root@bootos src]# ./all.bash # Building C bootstrap tool. cmd/dist ./make.bash: line 132: gcc: command not found [root@bootos src]# yum insatll gcc 下载go1.4 若想要使用go自己编译</description>
    </item>
    
    <item>
      <title>Go pprof</title>
      <link>https://xibolun.github.io/post/golang/go-pprof/</link>
      <pubDate>Thu, 29 Aug 2019 19:08:49 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go-pprof/</guid>
      <description>什么是pprof pprof是一个收集profiling数据样本，用于可视化展示和分析程序性能的工具，有cpu、内存、trace、Gorout</description>
    </item>
    
    <item>
      <title>关于Go并发的测验</title>
      <link>https://xibolun.github.io/post/golang/go%E5%B9%B6%E5%8F%91%E7%9A%84%E6%B5%8B%E9%AA%8C/</link>
      <pubDate>Wed, 28 Aug 2019 09:53:42 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E5%B9%B6%E5%8F%91%E7%9A%84%E6%B5%8B%E9%AA%8C/</guid>
      <description>原由： 今天早上看到鸟窝的一篇blog Go并发编程小测验： 你能答对几道题？ 尝试着做了一下，觉得里面有一些还是比较有意思，所以拿出来分析一下。 1</description>
    </item>
    
    <item>
      <title>关于gorm的问题</title>
      <link>https://xibolun.github.io/post/golang/%E5%85%B3%E4%BA%8Egorm%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 13 Aug 2019 15:04:36 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/%E5%85%B3%E4%BA%8Egorm%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>关于gorm的问题 DB的search无法置空 下面是一个有问题的代码；大体逻辑是locatino表里面有PID，一级一级向上找父节点；第二次f</description>
    </item>
    
    <item>
      <title>Go template</title>
      <link>https://xibolun.github.io/post/golang/go--template/</link>
      <pubDate>Tue, 30 Jul 2019 00:21:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--template/</guid>
      <description>Go Template 最近需要写一个代码生成工具，研究了一下template；golang有两个包， html/template 和 text/template 区别在于前者使用了一些转义 作用域 运算符 循环 map循环</description>
    </item>
    
    <item>
      <title>Go语言实战(七)并发模式</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%83/</link>
      <pubDate>Thu, 23 May 2019 11:41:46 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%83/</guid>
      <description>Go语言实战(七)并发模式 runner type Runner struct { interrupt chan os.Signal // 任务中断 timeout &amp;lt;-chan time.Time // 单向通道，只能接收，不能写入 complete chan error // 任务结束，有可能返回error tasks []func(int) // 需要执行</description>
    </item>
    
    <item>
      <title>Go语言实战(六)并发</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E5%85%AD/</link>
      <pubDate>Mon, 20 May 2019 09:03:50 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E5%85%AD/</guid>
      <description>Go语言实战(六)并发 线程与进程 应用启动的时候就会有一个进程(Process)，像linux里面的PID；一个进程可以起多个Thread(线</description>
    </item>
    
    <item>
      <title>Go语言实战(五)Go语言的类型系统</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%BA%94/</link>
      <pubDate>Tue, 14 May 2019 11:09:22 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%BA%94/</guid>
      <description>接口 interface demo 一个很入门的demo 嵌套类型 内部类型的方法可以提升到外部类型来调用 type user struct { name string email string } func (u *user) EchoHello() { fmt.Println(&amp;#34;hello &amp;#34;) } type admin struct { user level string } func TestPolymorphic(t *testing.T) { ad := admin{ user:</description>
    </item>
    
    <item>
      <title>Go语言实战(四)数组、切片、映射</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E5%9B%9B/</link>
      <pubDate>Sat, 11 May 2019 22:35:59 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E5%9B%9B/</guid>
      <description>第4章 数组、切片、映射 数组 长度固定，内存连续 声明一个数组 var arr [5]int arr :=[...]int{10,20,30,40,50} arr :=[5]int{10,20,30,40,50} 指针数组 sp := [3]*string{new(string), new(string), new(string)} //使用new(type)的方式来初始化对象 *sp[0] = &amp;#34;red&amp;#34; //</description>
    </item>
    
    <item>
      <title>Go语言实战(三)工具包</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%89/</link>
      <pubDate>Thu, 09 May 2019 22:35:59 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%89/</guid>
      <description>Init函数 在操作mysql数据库的时候需要引入 _ &amp;#34;github.com/go-sql-driver/mysql&amp;#34; 具体是引入了什么呢？引入的是github.com/go-sql-driver/mysql</description>
    </item>
    
    <item>
      <title>Go语言实战(一/二)基础</title>
      <link>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%80%E4%BA%8C/</link>
      <pubDate>Sun, 05 May 2019 07:39:43 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E4%B8%80%E4%BA%8C/</guid>
      <description>GO语言基础 顺序编程 执行 必须在main package下面的main方法才可以运行 运算符 &amp;amp; 返回内存地址 * 返回指针变量 func addRessFunc() { a := 1 c := a b := &amp;amp;a *b</description>
    </item>
    
    <item>
      <title>Go—RPC</title>
      <link>https://xibolun.github.io/post/golang/go--rpc/</link>
      <pubDate>Mon, 18 Mar 2019 17:26:28 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--rpc/</guid>
      <description>什么是RPC Remote Procedure Call，远程调用另外一台服务器上面的一个函数； 是一种协议，Rest API，Web Service都属于RPC RPC架构 sev</description>
    </item>
    
    <item>
      <title>GO—reflect</title>
      <link>https://xibolun.github.io/post/golang/go--reflect/</link>
      <pubDate>Mon, 10 Dec 2018 09:58:34 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--reflect/</guid>
      <description>如何通过go的实现类去拿到上级接口的所有method列表？ go的基础数据类型，ptr是什么类型；运行时的类型 有了指针对象，怎么获取指针对象所</description>
    </item>
    
    <item>
      <title>GO stack</title>
      <link>https://xibolun.github.io/post/golang/go--stack/</link>
      <pubDate>Fri, 07 Dec 2018 22:20:49 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--stack/</guid>
      <description>将http panic日志打印至文件当中 创建文件 panicFile, err := os.OpenFile(conf.Logger.PanicLogFile, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644) if err != nil { return nil, err } 注入文件 r.Use(mw.InjectFile(panicFile)) // InjectFile 注入Panic File func InjectFile(panic *os.File) func(next http.Handler) http.Handler { return func(next http.Handler) http.Handler { fn := func(w http.ResponseWriter, r</description>
    </item>
    
    <item>
      <title>Go File学习</title>
      <link>https://xibolun.github.io/post/golang/go--file/</link>
      <pubDate>Fri, 07 Dec 2018 22:20:32 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--file/</guid>
      <description>Go File学习 就写一个test方法 func TestFile(t *testing.T) { dir := &amp;#34;/tmp/hello&amp;#34; path := &amp;#34;/tmp/hello.txt&amp;#34; // create dir os.Mkdir(dir, 0755) // create file file, _ := os.OpenFile(path, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644) // filePath fmt.Printf(&amp;#34;File.name(file full path): %v \n&amp;#34;, file.Name()) fmt.Println(filepath.Dir(file.Name())) fmt.Println(filepath.Abs(filepath.Dir(os.Args[0]))) // current pwd pwd, err := os.Getwd() fmt.Printf(&amp;#34;current pwd: %s\n&amp;#34;, pwd) pwd, err = filepath.Abs(&amp;#34;./&amp;#34;) fmt.Printf(&amp;#34;current pwd: %s\n&amp;#34;, pwd)</description>
    </item>
    
    <item>
      <title>Go--time</title>
      <link>https://xibolun.github.io/post/golang/go--time/</link>
      <pubDate>Sat, 20 Oct 2018 22:12:01 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go--time/</guid>
      <description>Go time学习 func Test_time(t *testing.T) { // current time fmt.Printf(&amp;#34;current time : %s\n&amp;#34;, time.Now()) // format fmt.Printf(&amp;#34;current time (ANSIC): %s\n&amp;#34;, time.Now().Format(time.ANSIC)) fmt.Printf(&amp;#34;current time (Stamp): %s\n&amp;#34;, time.Now().Format(time.Stamp)) fmt.Printf(&amp;#34;current time (RFC1123): %s\n&amp;#34;, time.Now().Format(time.RFC1123)) fmt.Printf(&amp;#34;current time (UnixDate): %s\n&amp;#34;, time.Now().Format(time.UnixDate)) fmt.Printf(&amp;#34;current time (YYYY-MM-DD): %s\n&amp;#34;, time.Now().Format(&amp;#34;2006-01-02&amp;#34;)) fmt.Printf(&amp;#34;current time (YYYY-MM-DD HH:mm:ss): %s\n&amp;#34;, time.Now().Format(&amp;#34;2006-01-02 15:04:05&amp;#34;)) fmt.Printf(&amp;#34;current time (YYYY-MM-DD HH:mm): %s\n&amp;#34;, time.Now().Format(&amp;#34;2006-01-02 15:04&amp;#34;)) // year month day weekday fmt.Printf(&amp;#34;yearday: %d\n&amp;#34;, time.Now().YearDay()) fmt.Printf(&amp;#34;current Year:</description>
    </item>
    
    <item>
      <title>go规范及组件</title>
      <link>https://xibolun.github.io/post/golang/go%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 19 Jul 2018 20:39:43 +0800</pubDate>
      
      <guid>https://xibolun.github.io/post/golang/go%E7%BB%84%E4%BB%B6/</guid>
      <description>规范 命名规范 包名是小写单词，不应该有下划线或混合大小写，保持简洁，不要过早考虑包名冲突 使用驼峰而非下划线来命名函数或者变量 接口名称必须是er</description>
    </item>
    
  </channel>
</rss>
